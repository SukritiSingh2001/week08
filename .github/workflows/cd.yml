name: Full CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:

  # ---------------- BACKEND CI: test ----------------
  backend_ci:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do pip install -r "$req"; done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  # ---------------- BACKEND/CD: build & push images ----------------
  backend_build_push:
    runs-on: ubuntu-latest
    needs: backend_ci
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Debug ENV
        run: echo "ACR_NAME=$ACR_NAME | ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER"

      - name: Login to ACR
        run: az acr login -n $ACR_NAME

      - name: Build & push product_service image
        run: |
          docker build -t $ACR_LOGIN_SERVER/product_service:${IMAGE_TAG} ./backend/product_service/
          docker push $ACR_LOGIN_SERVER/product_service:${IMAGE_TAG}

      - name: Build & push order_service image
        run: |
          docker build -t $ACR_LOGIN_SERVER/order_service:${IMAGE_TAG} ./backend/order_service/
          docker push $ACR_LOGIN_SERVER/order_service:${IMAGE_TAG}

      - name: Build & push frontend image
        run: |
          docker build -t $ACR_LOGIN_SERVER/frontend:${IMAGE_TAG} ./frontend/
          docker push $ACR_LOGIN_SERVER/frontend:${IMAGE_TAG}

  # ---------------- CD: deploy to AKS ----------------
  deploy:
    runs-on: ubuntu-latest
    needs: backend_build_push
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Attach ACR to AKS
        run: az aks update --name ${{ secrets.AKS_CLUSTER_NAME }} --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --attach-acr $ACR_NAME

      - name: Deploy backend resources
        run: |
          cd k8s
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      - name: Deploy frontend
        run: |
          cd k8s
          sed -i "s|_PRODUCT_API_URL_|http://product-service-w08e1:8000|g" frontend.yaml
          sed -i "s|_ORDER_API_URL_|http://order-service-w08e1:8001|g" frontend.yaml
          kubectl apply -f frontend.yaml

      - name: Wait for backend services
        run: |
          for i in {1..60}; do
            PRODUCT_IP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get svc order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "Backend ser
