name: Full CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:

  # ---------------- BACKEND CI: test --------------
  backend_ci:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do pip install -r "$req"; done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  # ---------------- BUILD & PUSH DOCKER IMAGES ----------------
  build_push_images:
    runs-on: ubuntu-latest
    needs: backend_ci
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login -n ${{ secrets.ACR_NAME }}

      - name: Build & push product_service image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/product_service:${IMAGE_TAG} ./backend/product_service/
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/product_service:${IMAGE_TAG}

      - name: Build & push order_service image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/order_service:${IMAGE_TAG} ./backend/order_service/
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/order_service:${IMAGE_TAG}

      - name: Build & push frontend image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${IMAGE_TAG} ./frontend/
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${IMAGE_TAG}

  # ---------------- DEPLOY TO AKS -----------  
  deploy:
    runs-on: ubuntu-latest
    needs: build_push_images
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing

      - name: Deploy backend resources
        run: |
          cd k8s
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      - name: Wait for backend LoadBalancer IPs
        run: |
          for i in {1..60}; do
            PRODUCT_IP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get svc order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
              echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV
              break
            fi
            sleep 5
          done

      - name: Deploy frontend
        run: |
          bash -c "
          cd k8s
          sed -i 's|_PRODUCT_API_URL_|$PRODUCT_IP|g' frontend.yaml
          sed -i 's|_ORDER_API_URL_|$ORDER_IP|g' frontend.yaml
          kubectl apply -f frontend.yaml
          kubectl rollout status deployment/frontend
          "
