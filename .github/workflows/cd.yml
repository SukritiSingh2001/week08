# .github/workflows/ecommerce_ci_cd.yml
name: E-Commerce CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
      - development
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # ----------------- BACKEND CI -----------------
  backend_ci:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports: ["5432:5432"]
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports: ["5433:5432"]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do pip install -r "$req"; done
          pip install pytest httpx

      - name: Run Product Service Tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests

      - name: Run Order Service Tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests

  # ----------------- BACKEND CD -----------------
  backend_cd:
    runs-on: ubuntu-latest
    needs: backend_ci
    if: github.ref == 'refs/heads/main'
    outputs:
      product_ip: ${{ steps.get_ips.outputs.product }}
      order_ip: ${{ steps.get_ips.outputs.order }}

    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: az aks get-credentials --resource-group ${{ secrets.AKS_RG }} --name ${{ secrets.AKS_CLUSTER }} --overwrite-existing

      - name: Attach ACR
        run: az aks update --name ${{ secrets.AKS_CLUSTER }} --resource-group ${{ secrets.AKS_RG }} --attach-acr ${{ env.ACR_NAME }}

      - name: Deploy Backend Resources
        run: |
          cd k8s
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      - name: Wait for Service IPs
        id: get_ips
        run: |
          for i in {1..60}; do
            PRODUCT=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER=$(kubectl get svc order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT" && -n "$ORDER" ]]; then
              echo "product=$PRODUCT" >> $GITHUB_OUTPUT
              echo "order=$ORDER" >> $GITHUB_OUTPUT
              break
            fi
            sleep 5
          done

  # ----------------- FRONTEND CI -----------------
  frontend_ci:
    runs-on: ubuntu-latest
    needs: backend_ci
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - run: az acr login --name ${{ env.ACR_NAME }}
      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} ./frontend/
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}

  # ----------------- FRONTEND CD -----------------
  frontend_cd:
    runs-on: ubuntu-latest
    needs: [frontend_ci, backend_cd]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - run: az acr login --name ${{ env.ACR_NAME }}

      - name: Inject Backend IPs
        run: |
          sed -i "s|_PRODUCT_API_URL_|http://${{ needs.backend_cd.outputs.product_ip }}:8000|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|http://${{ needs.backend_cd.outputs.order_ip }}:8001|g" frontend/main.js

      - name: Build & Push Updated Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Deploy Frontend
        run: |
          cd k8s
          kubectl apply -f frontend.yaml
          kubectl rollout status deployment/frontend
